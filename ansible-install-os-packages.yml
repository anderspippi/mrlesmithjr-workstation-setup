---
- name: Install OS Packages
  hosts: localhost
  vars:
  pre_tasks:
    - block:

        - name: Ensuring Homebrew Is Installed
          stat:
            path: "/usr/local/bin/brew"
          register: "homebrew_check"

        - name: Fail If Homebrew Is Not Installed and install_homebrew_if_missing Is False
          fail:
            msg: "Homebrew is missing...Install from http://brew.sh/"
          when: >
                not homebrew_check.stat.exists and
                not install_homebrew_if_missing

        - name: Installing Homebrew
          command: >
                   /usr/bin/ruby -e \
                   "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
          when: >
                not homebrew_check.stat.exists and
                install_homebrew_if_missing

      when: ansible_os_family == "Darwin"

  tasks:
    - block:

        - name: Updating Homebrew
          homebrew:
            update_homebrew: true
          when: homebrew_check.stat.exists

        - name: Installing Homebrew Packages
          homebrew:
            name: "{{ item }}"
            state: "present"
            upgrade_all: "{{ upgrade_homebrew_packages }}"
          with_items: '{{ brew_packages }}'
          when: homebrew_check.stat.exists

        - name: Installing Homebrew Cask Packages
          homebrew_cask:
            name: "{{ item }}"
            state: "present"
          with_items: '{{ brew_cask_packages }}'
          when: homebrew_check.stat.exists

      when: ansible_os_family == "Darwin"

    - block:

        - name: Updating Apt Cache
          apt:
            update_cache: true
            cache_valid_time: 3600
          become: true

        - name: Installing OS Packages
          apt:
            name: "{{ item }}"
            state: "present"
          become: true
          with_items: '{{ debian_packages }}'

        - name: Installing ATOM Editor
          apt:
            deb: "{{ atom_editor_dl }}/atom-amd64.deb"
            state: "present"
          become: true

        - name: Adding Google Chrome Repo Key
          apt_key:
            url: "https://dl-ssl.google.com/linux/linux_signing_key.pub"
            state: "present"

        - name: Adding Google Chrome Repo
          apt_repository:
            repo: "deb http://dl.google.com/linux/chrome/deb/ stable main"
            state: "present"

        - name: Installing Google Chrome
          apt:
            name: "google-chrome-stable"
            state: "present"

      when: ansible_os_family == "Debian"

    - block:

        - name: Adding Dropbox Repo
          yum_repository:
            name: "dropbox"
            description: "Dropbox Repository"
            baseurl: "http://linux.dropbox.com/{{ ansible_distribution|lower }}/{{ ansible_distribution_version }}/"
            enabled: true
            gpgcheck: true
            gpgkey: "http://linux.dropbox.com/{{ ansible_distribution|lower }}/rpm-public-key.asc"
          become: true

        - name: Adding Google Chrome Repo
          yum_repository:
            name: "google-chrome"
            description: "Google Chrome"
            baseurl: "http://dl.google.com/linux/chrome/rpm/stable/$basearch"
            enabled: true
            gpgcheck: true
            gpgkey: "https://dl-ssl.google.com/linux/linux_signing_key.pub"
          become: true

      when: ansible_os_family == "RedHat"

    - block:

        - name: Installing EPEL-Release
          yum:
            name: "epel-release"
          become: true

        - name: Installing OS Packages
          yum:
            name: "{{ item }}"
            state: "present"
          become: true
          with_items: '{{ redhat_packages }}'

        - name: Installing ATOM Editor
          yum:
            name: "{{ atom_editor_dl }}/atom.x86_64.rpm"
            state: "present"
          become: true

        - name: Installing Dropbox
          yum:
            name: "nautilus-dropbox"
            state: "present"
          become: true

        - name: Installing Google Chrome
          yum:
            name: "google-chrome-stable"
            state: "present"
          become: true

      when: >
            ansible_os_family == "RedHat" and
            ansible_distribution != "Fedora"

    - block:

        - name: Updating vim-minimal (If Installed)
          command: "dnf update -y vim-minimal"
          become: true

        - name: Installing OS Packages
          dnf:
            name: "{{ item }}"
            state: "present"
          become: true
          with_items: '{{ redhat_packages }}'

        - name: Installing ATOM Editor
          dnf:
            name: "{{ atom_editor_dl }}/atom.x86_64.rpm"
            state: "present"
          become: true

        - name: Installing Dropbox
          dnf:
            name: "nautilus-dropbox"
            state: "present"
          become: true

        - name: Installing Google Chrome
          dnf:
            name: "google-chrome-stable"
            state: "present"
          become: true

      when: >
            ansible_os_family == "RedHat" and
            ansible_distribution == "Fedora"

    - name: Installing NPM Packages
      npm:
        name: "{{ item['name'] }}"
        state: "{{ item['state'] }}"
        global: "{{ item['global'] }}"
      become: true
      with_items: '{{ npm_packages }}'
      when: >
            npm_packages is defined and
            item['global']

    - name: Installing NPM Packages
      npm:
        name: "{{ item['name'] }}"
        state: "{{ item['state'] }}"
        global: "{{ item['global'] }}"
      become: false
      with_items: '{{ npm_packages }}'
      when: >
            npm_packages is defined and
            not item['global']

    - name: Installing Python Modules
      pip:
        name: "{{ item }}"
        state: "present"
      with_items: '{{ python_modules }}'
      when: >
            python_modules is defined and
            ansible_distribution != "Fedora"

    - name: Installing Python Modules
      pip:
        name: "{{ item }}"
        state: "present"
      become: true
      with_items: '{{ python_modules }}'
      when: >
            python_modules is defined and
            ansible_distribution == "Fedora"

    - name: Capturing ATOM Packages
      shell: "apm list | awk '{ print $2 }'"
      register: "_apm_list"
      changed_when: false

    - name: Installing ATOM Packages
      command: "apm install {{ item }}"
      with_items: '{{ atom_editor_packages }}'
      when: item not in _apm_list['stdout']
