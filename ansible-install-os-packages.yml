---
- name: Install OS Packages
  connection: local
  hosts: localhost
  vars:
    arch_packages_install: []
    arch_packages_uninstall: []
    brew_cask_packages_install: []
    brew_cask_packages_uninstall: []
    brew_packages_install: []
    brew_packages_uninstall: []
    debian_packages_install: []
    debian_packages_uninstall: []
    gem_packages_install: []
    gem_packages_uninstall: []
    redhat_packages_install: []
    redhat_packages_uninstall: []
  tasks:
    - name: Define Arch Packages to Install
      set_fact:
        arch_packages_install: "{{ arch_packages_install }} + ['{{ item.name }}']"
      loop: "{{ arch_packages }}"
      when: item.state|lower == "present"

    - name: Define Arch Packages to Uninstall
      set_fact:
        arch_packages_uninstall: "{{ arch_packages_uninstall }} + ['{{ item.name }}']"
      loop: "{{ arch_packages }}"
      when: item.state|lower == "absent"

    - name: Define Homebrew Cask Packages to Install
      set_fact:
        brew_cask_packages_install: "{{ brew_cask_packages_install }} + ['{{ item.name }}']"
      loop: "{{ brew_cask_packages }}"
      when: item.state|lower == "present"

    - name: Define Homebrew Cask Packages to Uninstall
      set_fact:
        brew_cask_packages_uninstall: "{{ brew_cask_packages_uninstall }} + ['{{ item.name }}']"
      loop: "{{ brew_cask_packages }}"
      when: item.state|lower == "absent"

    - name: Define Homebrew Packages to Install
      set_fact:
        brew_packages_install: "{{ brew_packages_install }} + ['{{ item.name }}']"
      loop: "{{ brew_packages }}"
      when: item.state|lower == "present"

    - name: Define Homebrew Packages to Uninstall
      set_fact:
        brew_packages_uninstall: "{{ brew_packages_uninstall }} + ['{{ item.name }}']"
      loop: "{{ brew_packages }}"
      when: item.state|lower == "absent"

    - name: Define Debian Packages to Install
      set_fact:
        debian_packages_install: "{{ debian_packages_install }} + ['{{ item.name }}']"
      loop: "{{ debian_packages }}"
      when: item.state|lower == "present"

    - name: Define Debian Packages to Uninstall
      set_fact:
        debian_packages_uninstall: "{{ debian_packages_uninstall }} + ['{{ item.name }}']"
      loop: "{{ debian_packages }}"
      when: item.state|lower == "absent"

    - name: Define RedHat Packages to Install
      set_fact:
        redhat_packages_install: "{{ redhat_packages_install }} + ['{{ item.name }}']"
      loop: "{{ redhat_packages }}"
      when: item.state|lower == "present"

    - name: Define RedHat Packages to Uninstall
      set_fact:
        redhat_packages_uninstall: "{{ redhat_packages_uninstall }} + ['{{ item.name }}']"
      loop: "{{ redhat_packages }}"
      when: item.state|lower == "absent"

    - name: Define Ruby Gems to Install
      set_fact:
        gem_packages_install: "{{ gem_packages_install }} + ['{{ item.name }}']"
      loop: "{{ gem_packages }}"
      when: item.state|lower == "present"

    - name: Define Ruby Gems to Uninstall
      set_fact:
        gem_packages_uninstall: "{{ gem_packages_uninstall }} + ['{{ item.name }}']"
      loop: "{{ gem_packages }}"
      when: item.state|lower == "absent"

    - block:
        - name: Upgrading OS Packages
          pacman:
            update_cache: true
            upgrade: true
          become: true
          register: result
          until: result is successful

        - name: Installing OS Packages
          pacman:
            name: "{{ arch_packages_install }}"
            state: present
          become: true
          register: result
          until: result is successful

        - name: Uninstalling OS Packages
          pacman:
            name: "{{ arch_packages_uninstall }}"
            state: absent
          become: true
          register: result
          until: result is successful

      when: ansible_os_family == "Archlinux"

    - block:
        - name: Ensuring Homebrew Is Installed
          stat:
            path: /usr/local/bin/brew
          register: homebrew_check

        - name: Fail If Homebrew Is Not Installed and install_homebrew_if_missing Is False
          fail:
            msg: Homebrew is missing...Install from http://brew.sh/
          when:
            - not homebrew_check.stat.exists
            - not install_homebrew_if_missing|bool

        - name: Installing Homebrew
          command: >
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
          when:
            - not homebrew_check.stat.exists
            - install_homebrew_if_missing|bool

      when: ansible_os_family == "Darwin"

    - name: ansible-hashicorp-toolbox
      include_role:
        name: ansible-hashicorp-toolbox
      when: ansible_os_family not in ['Darwin']

    - name: ansible-docker
      include_role:
        name: ansible-docker
      when: ansible_os_family in ["ArchLinux", "Debian", "elementary OS", "RedHat"]

    - name: ansible-virtualbox
      include_role:
        name: ansible-virtualbox
      when: >
        (ansible_os_family == "Debian" or
        ansible_distribution == "Fedora" or
        ansible_os_family == "Archlinux" or
        ansible_os_family == "elementary OS") and
        ansible_virtualization_role != "guest"

    - block:
        - name: Updating Homebrew
          homebrew:
            update_homebrew: "{{ update_homebrew }}"
          register: result
          until: result is successful
          when: homebrew_check.stat.exists

        - name: Upgrading Homebrew Packages
          homebrew:
            upgrade_all: "{{ upgrade_homebrew_packages }}"
          register: result
          until: result is successful
          when: homebrew_check.stat.exists

        - name: Installing Homebrew Taps
          homebrew_tap:
            name: "{{ item.name }}"
            state: "{{ item.state }}"
          register: result
          until: result is successful
          loop: "{{ brew_taps }}"
          when: homebrew_check.stat.exists

        - name: Installing Homebrew Cask Packages
          homebrew_cask:
            name: "{{ brew_cask_packages_install }}"
            state: present
          register: result
          until: result is successful
          when: homebrew_check.stat.exists

        - name: Uninstall Homebrew Cask Packages
          homebrew_cask:
            name: "{{ brew_cask_packages_uninstall }}"
            state: absent
          register: result
          until: result is successful
          when: homebrew_check.stat.exists

        - name: Installing Homebrew Packages
          homebrew:
            name: "{{ brew_packages_install }}"
            state: present
          register: result
          until: result is successful
          when: homebrew_check.stat.exists

        - name: Uninstall Homebrew Packages
          homebrew:
            name: "{{ brew_packages_uninstall }}"
            state: absent
          register: result
          until: result is successful
          when: homebrew_check.stat.exists

      when: ansible_os_family == "Darwin"

    - block:
        - name: Ensuring Initial Pre-Reqs Are Installed
          apt:
            name:
              - apt-transport-https
            state: present
          become: true
          register: result
          until: result is successful

        - name: Adding NodeJS Repo Key
          apt_key:
            url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
            state: present
          become: true
          when:
            - ansible_distribution == "Debian"
            - ansible_distribution_version is version('9', '>=')

        - name: Adding NodeJS Repo
          apt_repository:
            repo: "{{ 'deb https://deb.nodesource.com/node_11.x ' + ansible_distribution_release|lower + ' main' }}"
            state: present
          become: true
          when:
            - ansible_distribution == "Debian"
            - ansible_distribution_version is version('9', '>=')

        - name: Adding Debian Contrib Component
          apt_repository:
            repo: "{{ 'deb http://http.debian.net/debian ' + ansible_distribution_release|lower + ' contrib' }}"
            state: present
          become: true
          when: ansible_distribution == "Debian"

        - name: Updating Apt Cache
          apt:
            update_cache: true
            cache_valid_time: 3600
          become: true
          register: result
          until: result is successful

        - name: Installing OS Packages
          apt:
            name: "{{ debian_packages_install }}"
            state: present
          become: true
          register: result
          until: result is successful

        - name: Uninstalling OS Packages
          apt:
            name: "{{ debian_packages_uninstall }}"
            state: absent
          become: true
          register: result
          until: result is successful

        - name: Installing fonts-firacode
          apt:
            name: fonts-firacode
            state: present
          become: true
          register: result
          until: result is successful
          when: >
            (ansible_distribution == "Ubuntu" and
            ansible_distribution_version is version('18.04', '>=')) or
            (ansible_distribution == "Debian" and
            ansible_distribution_version is version('9', '>=')) or
            ansible_distribution == "elementary OS"

        - name: Installing ATOM Editor
          apt:
            deb: "{{ atom_editor_dl }}/atom-amd64.deb"
            state: present
          become: true
          register: result
          until: result is successful

        - name: Installing Hyper Terminal
          apt:
            deb: https://github.com/zeit/hyper/releases/download/3.0.2/hyper_3.0.2_amd64.deb
            state: present
          become: true
          register: result
          until: result is successful

        # https://www.dropbox.com/install-linux
        # This should never have to change
        - name: Installing Dropbox Helper Application
          apt:
            deb: https://www.dropbox.com/download?dl=packages/ubuntu/dropbox_2020.03.04_amd64.deb
          become: true
          register: result
          until: result is successful

        - name: Adding Google Chrome Repo Key
          apt_key:
            url: https://dl-ssl.google.com/linux/linux_signing_key.pub
            state: present
          become: true
          register: result
          until: result is successful

        - name: Adding Google Chrome Repo
          apt_repository:
            repo: deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main
            filename: google-chrome
            state: present
          become: true

        - name: Installing Google Chrome
          apt:
            name: google-chrome-stable
            state: present
          become: true
          register: result
          until: result is successful

        - name: Adding Brave Browser Repo Key
          apt_key:
            url: https://brave-browser-apt-release.s3.brave.com/brave-core.asc
            state: present
          become: true
          register: result
          until: result is successful
          when: ansible_distribution != "elementary OS"

        - name: Adding Brave Browser Repo
          apt_repository:
            repo: "deb [arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main"
            state: present
          become: true
          register: result
          until: result is successful
          when: ansible_distribution != "elementary OS"

        - name: Installing Brave Browser
          apt:
            name: brave-browser
            state: present
          become: true
          register: result
          until: result is successful
          when: ansible_distribution != "elementary OS"

        - name: Adding VS Code Repo Key
          apt_key:
            url: https://packages.microsoft.com/keys/microsoft.asc
            state: present
          become: true
          register: result
          until: result is successful

        - name: Adding VS Code Repo
          apt_repository:
            repo: deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main
            state: present
          become: true

        - name: Installing VS Code
          apt:
            name: code
            state: present
          become: true
          register: result
          until: result is successful

        - name: Removing Redundant VS Code Repo
          file:
            path: /etc/apt/sources.list.d/vscode.list
            state: absent
          become: true
          register: _vscode_repo_removed

        - name: Updating Apt Cache
          apt:
            update_cache: true
          become: true
          register: result
          until: result is successful
          when: _vscode_repo_removed.changed

        - name: Installing Postman Pre-Reqs
          apt:
            name:
              - libgconf-2-4
            state: present
          become: true
          register: result
          until: result is successful
          when: >
            (ansible_distribution == "Ubuntu" and
            ansible_distribution_version is version('18.04', '>=')) or
            ansible_distribution == "elementary OS"

        - name: Installing Postman
          unarchive:
            src: https://dl.pstmn.io/download/latest/linux64
            dest: "{{ postman_install_dir }}"
            remote_src: true
            creates: "{{ postman_install_dir + '/Postman/app/Postman' }}"
            mode: u=rwx,g=rx,o=rx
          become: true

        - name: Creating Postman Desktop Launcher
          template:
            src: templates/Postman.desktop.j2
            dest: /usr/share/applications/Postman.desktop
            owner: root
            group: root
            mode: u=rw,g=r,o=r
          become: true

        - name: Installing Bat
          apt:
            deb: https://github.com/sharkdp/bat/releases/download/v0.15.4/bat_0.15.4_amd64.deb
            state: present
          become: true
          register: result
          until: result is successful

      when: ansible_os_family in ["Debian", "elementary OS"]

    - block:
        - name: Adding Dropbox Repo
          yum_repository:
            name: dropbox
            description: Dropbox Repository
            baseurl: "http://linux.dropbox.com/{{ ansible_distribution|lower }}/{{ ansible_distribution_version }}/"
            enabled: true
            gpgcheck: true
            gpgkey: "http://linux.dropbox.com/{{ ansible_distribution|lower }}/rpm-public-key.asc"
          become: true
          when:
            - ansible_distribution == "Fedora"

        - name: Adding Google Chrome Repo
          yum_repository:
            name: google-chrome
            description: Google Chrome
            baseurl: http://dl.google.com/linux/chrome/rpm/stable/$basearch
            enabled: true
            gpgcheck: true
            gpgkey: https://dl-ssl.google.com/linux/linux_signing_key.pub
          become: true

      when: ansible_os_family == "RedHat"

    - block:
        - name: Installing EPEL-Release
          yum:
            name: epel-release
          become: true
          register: result
          until: result is successful

        - name: Installing OS Packages
          yum:
            name: "{{ redhat_packages_install }}"
            state: present
          become: true
          register: result
          until: result is successful

        - name: Uninstalling OS Packages
          yum:
            name: "{{ redhat_packages_uninstall }}"
            state: absent
          become: true
          register: result
          until: result is successful

        - name: Installing ATOM Editor
          yum:
            name: "{{ atom_editor_dl }}/atom.x86_64.rpm"
            state: present
          become: true
          register: result
          until: result is successful

        - name: Installing Hyper Terminal
          yum:
            name: https://github.com/zeit/hyper/releases/download/3.0.2/hyper-3.0.2.x86_64.rpm
            state: present
          become: true
          register: result
          until: result is successful

        # - name: Installing Dropbox
        #   yum:
        #     name: nautilus-dropbox
        #     state: present
        #   become: true

        - name: Installing Google Chrome
          yum:
            name: google-chrome-stable
            state: present
          become: true
          register: result
          until: result is successful

        - name: Adding VS Code Repo
          yum_repository:
            name: vscode
            description: Visual Studio Code
            baseurl: https://packages.microsoft.com/yumrepos/vscode
            enabled: true
            gpgcheck: true
            gpgkey: https://packages.microsoft.com/keys/microsoft.asc
          become: true

        - name: Installing VS Code
          yum:
            name: code
            state: present
          become: true
          register: result
          until: result is successful

      when:
        - ansible_os_family == "RedHat"
        - ansible_distribution != "Fedora"

    - block:
        - name: Updating vim-minimal (If Installed)
          command: dnf update -y vim-minimal
          become: true

        - name: Installing OS Packages
          dnf:
            name: "{{ redhat_packages_install }}"
            state: present
          become: true
          register: result
          until: result is successful

        - name: Uninstalling OS Packages
          dnf:
            name: "{{ redhat_packages_uninstall }}"
            state: absent
          become: true
          register: result
          until: result is successful

        - name: Installing ATOM Editor
          dnf:
            name: "{{ atom_editor_dl+'/atom.x86_64.rpm' }}"
            state: present
          become: true
          register: result
          until: result is successful

        - name: Installing Dropbox
          dnf:
            name: nautilus-dropbox
            state: present
          become: true
          register: result
          until: result is successful

        - name: Installing Google Chrome
          dnf:
            name: google-chrome-stable
            state: present
          become: true
          register: result
          until: result is successful

        - name: Adding VS Code Repo
          yum_repository:
            name: vscode
            description: Visual Studio Code
            baseurl: https://packages.microsoft.com/yumrepos/vscode
            enabled: true
            gpgcheck: true
            gpgkey: https://packages.microsoft.com/keys/microsoft.asc
          become: true

        - name: Installing VS Code
          dnf:
            name: code
            state: present
          become: true
          register: result
          until: result is successful

      when:
        - ansible_os_family == "RedHat"
        - ansible_distribution == "Fedora"

    - name: Installing Ruby Gems
      gem:
        name: "{{ item.name }}"
        state: "{{ item.state }}"
      # become: true
      register: result
      until: result is successful
      loop: "{{ gem_packages }}"

    - name: Installing NPM Packages
      npm:
        name: "{{ item.name }}"
        state: "{{ item.state }}"
        global: "{{ item.global }}"
      become: true
      register: result
      until: result is successful
      loop: "{{ npm_packages }}"
      when:
        - npm_packages is defined
        - item.global

    - name: Installing NPM Packages
      npm:
        name: "{{ item.name }}"
        state: "{{ item.state }}"
        global: "{{ item.global }}"
      become: false
      register: result
      until: result is successful
      loop: "{{ npm_packages }}"
      when:
        - npm_packages is defined
        - not item.global

    - name: Capturing ATOM Packages
      shell: apm list | awk '{ print $2 }'
      register: _apm_list
      changed_when: false

    - name: Installing ATOM Packages
      command: "apm install {{ item }}"
      loop: "{{ atom_editor_packages }}"
      when: item not in _apm_list.stdout

    - name: Installing Oh My ZSH
      git:
        repo: https://github.com/robbyrussell/oh-my-zsh
        dest: $HOME/.oh-my-zsh
      when: install_oh_my_zsh|bool

    - name: Capturing Current User
      set_fact:
        _current_user: "{{ lookup('env','USER') }}"
      become: false

    - name: Changing Shell To ZSH
      user:
        name: "{{ _current_user }}"
        shell: /bin/zsh
      become: true
      when: install_oh_my_zsh|bool

    - name: Installing Meslo Powerline Font
      get_url:
        url: https://github.com/powerline/fonts/blob/master/Meslo%20Slashed/Meslo%20LG%20M%20Regular%20for%20Powerline.ttf?raw=true
        dest: $HOME/Library/Fonts/Meslo LG M Regular for Powerline.ttf
      when:
        - ansible_os_family == "Darwin"
        - install_oh_my_zsh|bool

    - name: Installing VS Code Extensions
      shell: cat $HOME/.dotfiles/Code/extensions.list | xargs -L1 code --install-extension
